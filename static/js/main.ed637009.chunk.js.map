{"version":3,"sources":["ThreePointVis/Controls.js","ThreePointVis/layouts.js","ThreePointVis/InstancedPoints.js","ThreePointVis/Effects.js","ThreePointVis/ThreePointVis.js","App.js","index.js"],"names":["extend","TrackballControls","React","_ref","ref","controls","camera","gl","useThree","useFrame","current","update","resetCamera","target","set","position","up","up0","x","y","z","react","args","domElement","dynamicDampingFactor","keys","mouseButtons","LEFT","THREE","PAN","MIDDLE","ZOOM","RIGHT","ROTATE","useLayout","data","layout","modelOutputs","undefined","theta","i","length","datum","radius","Math","max","sqrt","asin","cos","sin","spiralLayout","numPoints","gamma","PI","torusLayout","numCols","ceil","numRows","col","row","floor","gridLayout","customLayout","useAnimatedLayout","_ref3","onFrame","_ref2","sourceX","valueOf","sourceY","sourceZ","targetX","targetY","targetZ","useSourceTargetLayout","prevLayout","animProps","useSpring","animationProgress","from","reset","_ref4","progress","interpolateSourceTarget","scratchObject3D","updateInstancedMeshMatrices","mesh","rotation","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","scratchColor","InstancedPoints","labels","selectedPoint","onSelectPoint","meshRef","handleClick","handlePointerDown","mouseDownRef","e","clientX","clientY","event","instanceId","pow","stopPropagation","point","useMousePointInteraction","colorAttrib","colorArray","Float32Array","toArray","usePointColors","frustumCulled","onClick","onPointerDown","attach","attachObject","vertexColors","three","group","interpolate","distance","intensity","decay","color","Effects","composer","useRef","scene","size","aspect","useMemo","width","height","useEffect","setSize","render","bloom","resolution","strength","threshold","react_default","a","createElement","attachArray","FXAAShader","material-uniforms-resolution-value","renderToScreen","EffectComposer","ShaderPass","RenderPass","UnrealBloomPass","controlsRef","web","far","ThreePointVis_Controls","skyColor","groundColor","ThreePointVis_InstancedPoints","TOTAL_POINTS","Array","fill","map","d","id","concat","batchSize","optimizer","tf","adam","dataCopy","Object","assign","copyData","dimensions","variables","selectedIndex","largeLayerIndices","setVariables","inputs","arguments","push","console","log","model","index","matMul","add","tanh","async","getData","b","xs","indices","gather","App","setLayout","layout2","setLayout2","setSelectedPoint","time","setTime","Date","now","setOutputs","inputLayers","setInputLayers","loss","setLoss","visRef","visRef2","setLabel","idx","abs","test_input","softmax","dataSync","tick","x_batch","y_batch","minimize","predYs","softmaxCrossEntropy","then","l","trainModel","display","get_inputs","shape","currentPos","nextPos","mul","newlayout","error","setTimeout","interval","setInterval","clearInterval","className","href","rel","ThreePointVis_ThreePointVis","onSubmit","evt","preventDefault","split","Number","type","value","onChange","dim","setDisplayedVariable","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.ed637009.chunk.js","sourcesContent":["import * as React from 'react';\nimport { extend, useThree, useFrame } from 'react-three-fiber';\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls';\nimport * as THREE from 'three';\n\n// extend THREE to include TrackballControls\nextend({ TrackballControls });\n\n// key code constants\nconst ALT_KEY = 18;\nconst CTRL_KEY = 17;\nconst CMD_KEY = 91;\n\nconst Controls = ({}, ref) => {\n  const controls = React.useRef();\n  const { camera, gl } = useThree();\n\n  useFrame(() => {\n    // update the view as the vis is interacted with\n    controls.current.update();\n  });\n\n  React.useImperativeHandle(ref, () => ({\n    resetCamera: () => {\n      // reset look-at (target) and camera position\n      controls.current.target.set(0, 0, 0);\n      camera.position.set(0, 0, 2);\n\n      // needed for trackball controls, reset the up vector\n      camera.up.set(\n        controls.current.up0.x,\n        controls.current.up0.y,\n        controls.current.up0.z\n      );\n    },\n  }));\n\n  return (\n    <trackballControls\n      ref={controls}\n      args={[camera, gl.domElement]}\n      dynamicDampingFactor={0.1}\n      keys={[\n        ALT_KEY, // orbit\n        CTRL_KEY, // zoom\n        CMD_KEY, // pan\n      ]}\n      mouseButtons={{\n        LEFT: THREE.MOUSE.PAN, // make pan the default instead of rotate\n        MIDDLE: THREE.MOUSE.ZOOM,\n        RIGHT: THREE.MOUSE.ROTATE,\n      }}\n    />\n  );\n};\n\nexport default React.forwardRef(Controls);\n","import * as React from 'react';\nimport { useSpring } from 'react-spring/three';\n\nfunction gridLayout(data) {\n  const numPoints = data.length;\n  const numCols = Math.ceil(Math.sqrt(numPoints));\n  const numRows = numCols;\n\n  for (let i = 0; i < numPoints; ++i) {\n    const datum = data[i];\n    const col = (i % numCols) - numCols / 2;\n    const row = Math.floor(i / numCols) - numRows / 2;\n\n    datum.x = col / numCols;\n    datum.y = row / numRows;\n    datum.z = 0;\n  }\n}\n\nfunction spiralLayout(data) {\n  // equidistant points on a spiral\n  let theta = 0;\n  for (let i = 0; i < data.length; ++i) {\n    const datum = data[i];\n    let radius = Math.max(1, Math.sqrt(i + 1) * 0.8);\n    theta += Math.asin(1 / radius) * 1;\n\n    radius = radius /150;\n\n    datum.x = radius * Math.cos(theta);\n    datum.y = radius * Math.sin(theta);\n    datum.z = 0;\n  }\n}\n\n\nfunction circleLayout(data) {\n  // equidistant points on a spiral\n  let theta = 0;\n  let numPoints = data.length;\n  let loops = 10;\n\n  for (let i = 0; i < numPoints; ++i) {\n    const datum = data[i];\n    let rad2D = 0.5\n    theta += 2*Math.PI/numPoints\n\n    datum.x = rad2D * Math.cos(theta);\n    datum.y = rad2D * Math.sin(theta);\n    datum.z = 0;\n  }\n}\n\nfunction torusLayout(data) {\n\n  let numPoints = data.length/2;\n  let loops = 50;\n  let c = 0.3;\n  let rad = 0.1\n\n  // equidistant points on a spiral\n  let theta = 0;\n  let gamma = 0;\n  for (let i = 0; i < numPoints; ++i) {\n    const datum = data[i];\n    \n    theta += 2*Math.PI/numPoints\n    gamma += 2*Math.PI/(numPoints/loops)\n    // console.log(i, theta, gamma % 2*Math.PI)\n\n    datum.x = (c + rad * Math.cos(gamma))*Math.cos(theta);\n    datum.y = (c + rad * Math.cos(gamma))*Math.sin(theta);\n    datum.z = rad*Math.sin(gamma);\n  }\n\n  // equidistant points on a spiral\n  theta = 0;\n  gamma = 0;\n  for (let i = numPoints; i < numPoints*2; ++i) {\n    const datum = data[i];\n    \n    theta += 2*Math.PI/numPoints\n    gamma += 2*Math.PI/(numPoints/loops)\n    // console.log(i, theta, gamma % 2*Math.PI)\n\n    datum.x = (c + rad * Math.cos(gamma))*Math.cos(theta)  + c;\n    datum.z = (c + rad * Math.cos(gamma))*Math.sin(theta);\n    datum.y = rad*Math.sin(gamma);\n  }\n\n\n}\n\n\nfunction customLayout(data, modelOutputs) {\n  // console.log('customlauout', modelOutputs)\n  \n  const numPoints = data.length;\n\n\n  for (let i = 0; i < numPoints; ++i) {\n    const datum = data[i];\n    if (modelOutputs === undefined) {\n      // datum.x = 0;\n      // datum.y = 0;\n    } else {\n      // console.log('xx', modelOutputs)\n      // console.log(i)\n      \n      datum.x = modelOutputs[i*3];\n      datum.y = modelOutputs[i*3+1];\n      datum.z = modelOutputs[i*3+2];;\n      // TODO - work out how to signal its divisible by 3\n      // console.log(datum)\n    }\n    \n    \n  }\n}\n\n\nexport const useLayout = ({ data, layout = 'grid', modelOutputs }) => {\n\n  React.useEffect(() => {\n    if (modelOutputs === undefined) { \n    switch (layout) {\n      case 'spiral':\n        spiralLayout(data);\n        break;\n      case 'torus':\n        torusLayout(data);\n        break;\n      case 'grid':\n      default: {\n        gridLayout(data);\n      }\n    }\n\n  } else {\n    \n    customLayout(data, modelOutputs)\n  }\n\n  }, [data, layout, modelOutputs]);\n};\n\nfunction useSourceTargetLayout({ data, layout, modelOutputs }) {\n  \n  // prep for new animation by storing source\n  React.useEffect(() => {\n    for (let i = 0; i < data.length; ++i) {\n      data[i].sourceX = (data[i].x || 0).valueOf();\n      data[i].sourceY = (data[i].y || 0).valueOf();\n      data[i].sourceZ = (data[i].z || 0).valueOf();\n    }\n  }, [data, layout, modelOutputs]);\n\n  // run layout\n  // console.log('we', modelOutputs)\n\n  // console.log('1', layout, data[0])\n\n  useLayout({ data, layout, modelOutputs});\n\n  // store target\n  React.useEffect(() => {\n    for (let i = 0; i < data.length; ++i) {\n      data[i].targetX = data[i].x;\n      data[i].targetY = data[i].y;\n      data[i].targetZ = data[i].z;\n    }\n  }, [data, layout, modelOutputs]);\n\n  // console.log('2', layout, data[0])\n}\n\nfunction interpolateSourceTarget(data, progress, layout) {\n  // console.log(progress, layout)\n\n  // console.log(layout, progress, data[0])\n  for (let i = 0; i < data.length; ++i) {\n    data[i].x = (1 - progress) * data[i].sourceX + progress * data[i].targetX;\n    data[i].y = (1 - progress) * data[i].sourceY + progress * data[i].targetY;\n    data[i].z = (1 - progress) * data[i].sourceZ + progress * data[i].targetZ;\n  }\n}\n\nexport function useAnimatedLayout({ data, layout, onFrame , modelOutputs}) {\n  // compute layout remembering initial position as source and\n  // end position as target\n  \n  useSourceTargetLayout({ data, layout, modelOutputs });\n  \n  // do the actual animation when layout changes\n  const prevLayout = React.useRef(layout);\n  // console.log(prevLayout.current, layout, layout !== prevLayout.current)\n  const animProps = useSpring({\n    animationProgress: 1,\n    from: { animationProgress: 0 },\n    reset: layout !== prevLayout.current,\n    onFrame: ({ animationProgress }) => {\n      // interpolate based on progress\n      interpolateSourceTarget(data, animationProgress, layout);\n      // callback to indicate data has updated\n      onFrame({ animationProgress });\n    },\n  });\n  prevLayout.current = layout;\n\n  return animProps;\n}\n","import * as React from 'react';\nimport * as THREE from 'three';\nimport { useAnimatedLayout } from './layouts';\nimport { a } from 'react-spring/three';\n\n// re-use for instance computations\nconst scratchObject3D = new THREE.Object3D();\n\nfunction updateInstancedMeshMatrices({ mesh, data }) {\n  if (!mesh) return;\n\n  // set the transform matrix for each instance\n  for (let i = 0; i < data.length; ++i) {\n    const { x, y, z } = data[i];\n\n    scratchObject3D.position.set(x, y, z);\n    scratchObject3D.rotation.set(0.5 * Math.PI, 0, 0); // cylinders face z direction\n    scratchObject3D.updateMatrix();\n    mesh.setMatrixAt(i, scratchObject3D.matrix);\n  }\n\n  mesh.instanceMatrix.needsUpdate = true;\n}\n\nconst SELECTED_COLOR = '#E74C3C';\nconst DEFAULT_COLOR = '#2E86C1';\n\n// re-use for instance computations\nconst scratchColor = new THREE.Color();\n\nconst usePointColors = ({ data, labels, selectedPoint }) => {\n  const numPoints = data.length;\n  const colorAttrib = React.useRef();\n  const colorArray = React.useMemo(() => new Float32Array(numPoints * 3), [\n    numPoints,\n  ]);\n  // console.log(labels)\n  React.useEffect(() => {\n    for (let i = 0; i < data.length; ++i) {\n      scratchColor.set(\n        labels[i] === 1 ? SELECTED_COLOR : DEFAULT_COLOR\n      );\n      scratchColor.toArray(colorArray, i * 3);\n    }\n    colorAttrib.current.needsUpdate = true;\n  }, [data, selectedPoint, colorArray]);\n\n  return { colorAttrib, colorArray };\n};\n\nconst useMousePointInteraction = ({ data, selectedPoint, onSelectPoint }) => {\n  // track mousedown position to skip click handlers on drags\n  const mouseDownRef = React.useRef([0, 0]);\n  const handlePointerDown = e => {\n    mouseDownRef.current[0] = e.clientX;\n    mouseDownRef.current[1] = e.clientY;\n  };\n\n  const handleClick = event => {\n    const { instanceId, clientX, clientY } = event;\n    const downDistance = Math.sqrt(\n      Math.pow(mouseDownRef.current[0] - clientX, 2) +\n        Math.pow(mouseDownRef.current[1] - clientY, 2)\n    );\n\n    // skip click if we dragged more than 5px distance\n    if (downDistance > 5) {\n      event.stopPropagation();\n      return;\n    }\n\n    // index is instanceId if we never change sort order\n    const index = instanceId;\n    const point = data[index];\n\n    // console.log('got point =', point);\n    // toggle the point\n    if (point === selectedPoint) {\n      onSelectPoint(point);\n    } else {\n      // console.log(point)\n      onSelectPoint(point);\n    }\n  };\n\n  return { handlePointerDown, handleClick };\n};\n\nconst InstancedPoints = ({ data, labels, layout, selectedPoint, onSelectPoint, modelOutputs}) => {\n  const meshRef = React.useRef();\n  const numPoints = data.length;\n\n  // run the layout, animating on change\n  const { animationProgress } = useAnimatedLayout({\n    data,\n    layout,\n    onFrame: () => {\n      updateInstancedMeshMatrices({ mesh: meshRef.current, data });\n    },\n    modelOutputs\n  });\n\n  // update instance matrices only when needed\n  React.useEffect(() => {\n    updateInstancedMeshMatrices({ mesh: meshRef.current, data });\n  }, [data, layout]);\n\n  const { handleClick, handlePointerDown } = useMousePointInteraction({\n    data,\n    selectedPoint,\n    onSelectPoint,\n  });\n\n\n  \n\n  const { colorAttrib, colorArray } = usePointColors({ data, labels, selectedPoint });\n\n  return (\n    <>\n      <instancedMesh\n        ref={meshRef}\n        args={[null, null, numPoints]}\n        frustumCulled={false}\n        onClick={handleClick}\n        onPointerDown={handlePointerDown}\n      >\n        <sphereBufferGeometry attach=\"geometry\" args={[0.005, 0.005, 0.005]}>\n          <instancedBufferAttribute\n            ref={colorAttrib}\n            attachObject={['attributes', 'color']}\n            args={[colorArray, 3]}\n          />\n        </sphereBufferGeometry>\n        <meshStandardMaterial\n          attach=\"material\"\n          vertexColors={THREE.VertexColors}\n        />\n      </instancedMesh>\n      {selectedPoint && (\n        <a.group\n          position={animationProgress.interpolate(() => [\n            selectedPoint.x,\n            selectedPoint.y,\n            selectedPoint.z,\n          ])}\n        >\n          <pointLight\n            distance={0.9}\n            position={[0, 0, 0.3]}\n            intensity={0.2}\n            decay={30}\n            color=\"#3f3\"\n          />\n          <pointLight\n            position={[0, 0, 0]}\n            decay={1}\n            distance={0.5}\n            intensity={1.0}\n            color=\"#2f0\"\n          />\n        </a.group>\n      )}\n    </>\n  );\n};\n\nexport default InstancedPoints;\n","import * as THREE from 'three';\nimport React, { useRef, useEffect, useMemo } from 'react';\nimport { extend, useThree, useFrame } from 'react-three-fiber';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader';\n\nextend({ EffectComposer, ShaderPass, RenderPass, UnrealBloomPass });\n\nexport default function Effects() {\n  const composer = useRef();\n  const { scene, gl, size, camera } = useThree();\n  const aspect = useMemo(() => new THREE.Vector2(size.width, size.height), [\n    size,\n  ]);\n  useEffect(() => void composer.current.setSize(size.width, size.height), [\n    size,\n  ]);\n  useFrame(() => composer.current.render(), 1);\n\n  const bloom = {\n    resolution: aspect,\n    strength: 0.0006,\n    radius: 0.00001,\n    threshold: 0.0004,\n  };\n\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n\n      <unrealBloomPass\n        attachArray=\"passes\"\n        args={[bloom.resolution, bloom.strength, bloom.radius, bloom.threshold]}\n      />\n      <shaderPass\n        attachArray=\"passes\"\n        args={[FXAAShader]}\n        material-uniforms-resolution-value={[1 / size.width, 1 / size.height]}\n        renderToScreen\n      />\n    </effectComposer>\n  );\n}\n","import * as React from 'react';\nimport { Canvas } from 'react-three-fiber';\nimport Controls from './Controls';\nimport InstancedPoints from './InstancedPoints';\nimport Effects from './Effects';\nimport { AxesHelper } from 'three';\n\nconst ThreePointVis = ({ data, labels, layout, selectedPoint, onSelectPoint, modelOutputs}, ref) => {\n  const controlsRef = React.useRef();\n  React.useImperativeHandle(ref, () => ({\n    resetCamera: () => {\n      return controlsRef.current.resetCamera();\n    },\n  }));\n\n  // console.log('thrreepoint', layout)\n\n  return (\n    <Canvas camera={{ position: [0, 0, 2], far: 15000 }}>\n      <Controls ref={controlsRef} />\n      <ambientLight color=\"#ffffff\" intensity={0.1} />\n      <hemisphereLight\n        color=\"#ffffff\"\n        skyColor=\"#ffffbb\"\n        groundColor=\"#080820\"\n        intensity={1.0}\n      />\n      <InstancedPoints\n        data={data}\n        labels={labels}\n        layout={layout}\n        selectedPoint={selectedPoint}\n        onSelectPoint={onSelectPoint}\n        modelOutputs={modelOutputs}\n      />\n      <Effects />\n      <axesHelper/>\n    </Canvas>\n  );\n};\n\nexport default React.forwardRef(ThreePointVis);\n","import * as React from 'react';\nimport ThreePointVis from './ThreePointVis/ThreePointVis';\nimport './styles.css';\nimport * as tf from \"@tensorflow/tfjs\";\nimport { TextField } from '@material-ui/core';\n\nconst TOTAL_POINTS = 2000;\nconst data = new Array(TOTAL_POINTS).fill(0).map((d, id) => ({ id }));\nconst labels = new Array(TOTAL_POINTS/2).fill(0).concat( new Array(TOTAL_POINTS/2).fill(1))\nconst batchSize = 1000;\n\nvar optimizer = tf.train.adam(0.01 /* learningRate */);\n\nfunction copyData(data) {\n  const dataCopy = new Array(TOTAL_POINTS).fill(0).map((d, id) => ({ id }));\n  for (let i = 0; i < data.length; ++i) {\n    dataCopy[i] = Object.assign({}, data[i]);\n  }\n  return dataCopy;\n}\n\nconst dataCopy = copyData(data)\nvar dimensions = [3,3,3,2];\nvar variables = [];\nvar selectedIndex = dimensions.length-1;\nvar largeLayerIndices = [0,3];\n\nfunction setVariables(inputs=[]) {\n  // The weights and biases for the two dense layers.\n  variables = [];\n\n  for (let i = 0; i < inputs.length-1; i++) {\n    // weight\n    variables.push(tf.variable(tf.randomNormal([inputs[i], inputs[i+1]])))\n    console.log(inputs[i])\n    // bias\n    variables.push(tf.variable(tf.randomNormal([inputs[i+1]])))\n    \n    \n  }\n\n  optimizer = tf.train.adam(0.01 /* learningRate */);\n}\n\nfunction setDisplayedVariable(idx) {\n  selectedIndex = idx;\n}\n\n\nfunction model(x, index=-1) {\n\n  if (index < 0 ) {\n    index = variables.length\n  } else {\n    index = index*2\n  }\n\n  for (let i = 0; i <index; i++) {\n    // console.log(variables[i])\n    x = x.matMul(variables[i])\n    i++;\n    x = x.add(variables[i])\n    x = x.tanh()\n    // console.log('x', x)\n  }\n\n  return x\n  \n  // return x.matMul(w1).add(b1).tanh().matMul(w2).add(b2).tanh().matMul(w3).add(b3).tanh();\n}\n\nasync function getData(b=16) {\n\n  if (b == 16) {\n    b = batchSize\n  }\n\n  const xs = data.map(data => [data.x, data.y, data.z])\n  const x = tf.tensor2d(xs, [xs.length, 3]);\n  const y = tf.oneHot(labels,2)\n\n  // // get an array of random indices\n  const indices = tf.randomUniform([b], 0, TOTAL_POINTS, 'int32')\n\n  const x_batch  = x.gather(indices)\n  const y_batch = y.gather(indices)\n\n  return [x_batch, y_batch]\n\n}\n\n\nasync function trainModel(){\n\n\n\n\n  const [x_batch, y_batch] = await getData();\n  console.log(x_batch)\n\n  // try {\n  optimizer.minimize(() => {\n        const predYs = model(x_batch);\n        const loss = tf.losses.softmaxCrossEntropy(y_batch, predYs);\n        loss.data().then(l => console.log('Loss', l));\n        return loss;\n      });\n    // } catch (error) {\n    //   console.log('vars', variables)\n    //   console.error(error);\n    //   // expected output: ReferenceError: nonExistentFunction is not defined\n    //   // Note - error messages will vary depending on browser\n    // }\n    \n}\n\n\n\nexport default function App() {\n  const [layout, setLayout] = React.useState('torus');\n  const [layout2, setLayout2] = React.useState('custom');\n  const [selectedPoint, setSelectedPoint] = React.useState(null);\n  const [time, setTime] = React.useState(Date.now());\n  // const [model, setModel] = React.useState(createModel());\n  const [modelOutputs, setOutputs] = React.useState(undefined);\n\n  const [inputLayers, setInputLayers] = React.useState('3,3,3,2');\n  const [loss, setLoss] = React.useState(0);\n  \n  // use the text field to update dimensions\n  const handleSubmit = (evt) => {\n      evt.preventDefault();\n      dimensions = inputLayers.split(',').map(Number);\n      console.log(dimensions)\n      setVariables(dimensions)\n\n  }\n\n  const visRef = React.useRef();\n  const handleResetCamera = () => {\n    visRef.current.resetCamera();\n  };\n\n  const visRef2 = React.useRef();\n  const handleResetCamera2 = () => {\n    visRef2.current.resetCamera();\n  };\n\n  \n  const setLabel = (selectedPoint) => {\n    console.log(\"Selected point\", selectedPoint)\n    const idx = selectedPoint['id']\n    labels[idx] = Math.abs(1-labels[idx])\n    setSelectedPoint(selectedPoint)\n\n    let test_input = tf.tensor2d([[selectedPoint.x, selectedPoint.y, selectedPoint.z]], [1,3])\n    // console.log(test_input.dataSync())\n    console.log('Pred', model(test_input).softmax().dataSync())\n\n\n  }\n\n  function get_inputs() {\n\n    const x = data.map(data => [data.x, data.y, data.z])\n    \n    return tf.tensor2d(x, [x.length, 3]);\n  }\n\n\n  // async function UpdateModels() {\n\n  //   let currentTime = Date.now()\n  //   setTime(Date.now())\n  //   const inputTensor = get_inputs()\n  //   // const labelTensor = tf.tensor2d(labels, [labels.length, 1]);\n  //   setOutputs(model(get_inputs()).dataSync())\n\n  //   // Train the model\n  //   await trainModel();\n  //   console.log('Done Training');\n  //   // console.log('prediction', model.predict(tf.slice(inputTensor,0,16)).dataSync())\n  //   // tick();\n  //   setLayout2(\"custom\"+time)\n\n  // }\n\n  async function tick() {\n\n    try {\n      trainModel();\n      const [x_batch, y_batch] = await getData(32);\n      const predYs = model(x_batch);\n      setLoss( await tf.losses.softmaxCrossEntropy(y_batch, predYs).data());\n\n\n      // setLoss(loss.dataSync())\n      // let currentTime = Date.now()\n      // setTime(Date.now())\n\n      var display = model(get_inputs(), selectedIndex);\n      // console.log(selectedIndex, dimensions.length)\n      if (selectedIndex == dimensions.length-1) {\n        // console.log('islast')\n        display = display.softmax();\n      }\n      // check if its 2D and if so add a dimension of zeros for z\n      if (display.shape[1] == 2) { \n        display = tf.concat([display, tf.zeros([display.shape[0], 1])], 1)\n      } else if (display.shape[1] > 3) {\n        display = tf.slice(display, [0,largeLayerIndices[0]], [TOTAL_POINTS, largeLayerIndices[1]]);\n      }\n\n      // next only step it a little bit towards the goal\n      const currentPos = tf.tensor2d(dataCopy.map(data => [data.x, data.y, data.z]), [TOTAL_POINTS, 3]);\n      const nextPos = tf.add(currentPos.mul(0.7), display.mul(0.3));\n\n      // console.log(currentPos, display, nextPos)\n\n      setOutputs(nextPos.dataSync())\n      // console.log('prediction', tf.slice(get_inputs(),0,16).dataSync())\n      let newlayout = \"custom\"+Date.now()\n      setLayout2(newlayout)\n      // console.log('nl', newlayout)\n      // console.log('time', time, )\n    // console.log(layout2)\n    } catch (error) {\n      console.error(error);\n      // expected output: ReferenceError: nonExistentFunction is not defined\n      // Note - error messages will vary depending on browser\n    }\n    \n  }\n\n  React.useEffect(() => {\n    // \n    // TODO have something down below trigger the beginnging of training\n    setTimeout(() => setVariables(dimensions), 50);\n    \n    const interval = setInterval(() => tick(), 100);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n\n  \n\n  return (\n    <div>\n    <div className= \"Header\"> \n    <h1> Visualising neural net training through manifold transformations\n    </h1>  \n\n    On the left is a binary dataset - ranging in complexity from a 2D grid to two intersecting tori. On the right is the neural net's attempt to separate the classes. \n    The best introduction to the 'manifold theory' of neural networks is <a href=\"https://colah.github.io/posts/2014-03-NN-Manifolds-Topology/\" rel=\"noreferrer\">\n        Chris Olah's post on neural nets, manifolds and topology\n      </a>, and still the best way to understand the intuition is <a href=\"https://cs.stanford.edu/people/karpathy/convnetjs//demo/classify2d.html\" rel=\"noreferrer\">\n          Karpathy's 2D ConvNetJS demo\n      </a>\n      <br/>\n\n      By visualising it in three dimensions it lets us explore some of the more complex examples (such as the tori), and visualise how a three dimensional layer is necessary to separate some two dimensional shapes (such as the spiral).\n\n      <br/>\n      <br/>\n\n      In order to successfully separate the tori examples - you'll need to change the model layers to include at least one four dimensional layer - can you think about why?\n\n      <br/>\n      <br/>\n\n      Click nodes to change their class. Click the buttons to visualise specific layers, or submit the form to change the layers of the neural net (the input layer must be three dimensional, and the output layer two dimensional) Where a layer has more than 3 neurons, the first 3 are visualised. \n      Tanh activations are used to bound the outputs of each layer and make it easier to visualise. \n\n    </div>\n    <div className=\"App\">\n    \n    <div className=\"AppLHS\">\n      <div className=\"vis-container\">\n        <ThreePointVis\n          ref={visRef}\n          data={data}\n          labels={labels}\n          layout={layout}\n          selectedPoint={selectedPoint}\n          onSelectPoint={setLabel}\n        />\n      </div>\n      <button className=\"reset-button\" onClick={handleResetCamera}>\n        Reset Camera\n      </button>\n      <div className=\"controls\">\n        <strong>Layouts</strong>{' '}\n        <button\n          onClick={() => setLayout('grid')}\n          className={layout === 'grid' ? 'active' : undefined}\n        >\n          Grid\n        </button>\n        <button\n          onClick={() => setLayout('spiral')}\n          className={layout === 'spiral' ? 'active' : undefined}\n        >\n          Spiral\n        </button>\n        <button\n          onClick={() => setLayout('torus')}\n          className={layout === 'torus' ? 'active' : undefined}\n        >\n          Torus\n        </button>\n\n        {selectedPoint && (\n          <div className=\"selected-point\">\n            You selected <strong>{selectedPoint.id}</strong>\n          </div>\n        )}\n      </div>\n    </div>\n    {/* <div className=\"Divider\">\n\n\n    </div> */}\n    <div className=\"AppRHS\">\n    <div className=\"vis-container\">\n        <ThreePointVis\n          ref={visRef2}\n          data={dataCopy}\n          labels={labels}\n          layout={layout2}\n          selectedPoint={selectedPoint}\n          onSelectPoint={setLabel}\n          modelOutputs={modelOutputs}\n        />\n      </div>\n      <button className=\"reset-button\" onClick={handleResetCamera2}>\n        Reset Camera\n      </button>\n      <div className=\"controls\">\n        <strong>Select Layer</strong>{' '}\n        {/* <button\n          className=\"reset-button\" \n          onClick={() => setLayout('spiral')}\n          className={layout === 'spiral' ? 'active' : undefined}\n        >\n          Spiral\n        </button> */}\n\n        <form onSubmit={handleSubmit}>\n          <label>\n            Model layers:\n            <input\n              type=\"text\"\n              value={inputLayers}\n              onChange={e => setInputLayers(e.target.value)}\n            />\n          </label>\n          <input type=\"submit\" value=\"Update layers\" />\n        </form>\n\n        <div>\n      {dimensions.map((dim, idx) => (\n        <button\n                className=\"reset-button\"\n                onClick={() => setDisplayedVariable(idx)} //TODO CHANGE THIS SET\n                className={selectedIndex === idx ? 'active' : undefined}\n              >\n                {dim}\n        </button>\n\n      ))}\n      <div>\n      Loss: {loss}\n      </div>\n      {/* {selectedIndex} */}\n    </div>\n        {selectedPoint && (\n          <div className=\"selected-point\">\n            You selected <strong>{selectedPoint.id}</strong>\n          </div>\n        )}\n      </div>\n\n    </div>\n    </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}